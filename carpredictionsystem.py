# -*- coding: utf-8 -*-
"""CarPredictionSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TFQQF-GMWsjlokzi632vchzxCRUbQBbG

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn import metrics
import numpy as np
import joblib
import warnings
warnings.filterwarnings('ignore')

"""Data Collection and Processing"""

# loading the data from csv file to pandas dataframe
car_dataset=pd.read_csv('/content/car data.csv')

# inspecting the first 5 rows of the dataframe
car_dataset.head()

# checking the number of rows and columns
car_dataset.shape

# getting some information about the dataset
car_dataset.info()

# checking the number of missing values
car_dataset.isnull().sum()

# describe numerical features
car_dataset.describe()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorical Data"""

# encoding 'Fuel_Type' column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

# encoding 'Seller_Type' column
car_dataset.replace({'Seller_Type':{'Individual':0,'Dealer':1}},inplace=True)

# encoding 'Transmission' column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1,}},inplace=True)

car_dataset.head()

"""Splitting the Data and Target"""

# Add Car_Age feature
car_dataset['Car_Age'] = 2025 - car_dataset['Year']
X = car_dataset.drop(['Car_Name','Selling_Price','Year'], axis=1)

Y=car_dataset['Selling_Price']
print(car_dataset.head())

print(X)
print(X.head())

print(Y)
print(Y.head())

# Correlation heatmap
plt.figure(figsize=(10,6))
sns.heatmap(car_dataset.drop(['Car_Name', 'Year'], axis=1).corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation Heatmap (Without Year)")
plt.show()

# Pairplot
sns.pairplot(car_dataset.drop(['Car_Name', 'Year'], axis=1))
plt.show()

"""Splitting Training and Test Data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=2)
print("Training set size:", X_train.shape)
print("Testing set size:", X_test.shape)

"""Model Training

1.Linear Regression
"""

# loading the Linear Regression model
lin_reg_model=LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on Training Data
training_data_prediction=lin_reg_model.predict(X_train)

# R squared Error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared Error: ",error_score)

"""Visualise the Actual Prices and Predicted Prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Test Data
test_data_prediction=lin_reg_model.predict(X_test)

# R squared Error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared Error: ",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Training Data
training_data_prediction = lin_reg_model.predict(X_train)

# prediction on Test Data
test_data_prediction = lin_reg_model.predict(X_test)

# Evaluation Metrics
print("Linear Regression Model Evaluation:")
print("R squared Error (Train):", metrics.r2_score(Y_train, training_data_prediction))
print("R squared Error (Test):", metrics.r2_score(Y_test, test_data_prediction))
print("MAE:", mean_absolute_error(Y_test, test_data_prediction))
print("RMSE:", np.sqrt(mean_squared_error(Y_test, test_data_prediction)))

# Feature Importance (Linear Regression Coefficients)
importance = pd.Series(lin_reg_model.coef_, index=X.columns)
importance.plot(kind='barh', figsize=(8,5), color='skyblue')
plt.title("Feature Importance (Linear Regression Coefficients)")
plt.xlabel("Coefficient Value")
plt.show()

print("Feature Importances:\n", importance)

# Residual Analysis for Linear Regression
residuals = Y_test - test_data_prediction
sns.histplot(residuals, kde=True, color='orange')
plt.title("Residual Distribution (Linear Regression)")
plt.xlabel("Residual (Actual - Predicted)")
plt.show()

"""2. Lasso"""

# loading the Lasso model
lass_reg_model=Lasso(alpha=0.01)

lass_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on Training Data
training_data_prediction=lass_reg_model.predict(X_train)

# R squared Error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared Error: ",error_score)

"""Visualise the Actual Prices and Predicted Prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Test Data
test_data_prediction=lass_reg_model.predict(X_test)

# R squared Error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared Error: ",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Training Data
training_data_prediction = lass_reg_model.predict(X_train)

# prediction on Test Data
test_data_prediction = lass_reg_model.predict(X_test)

# Evaluation Metrics
print("Lasso Regression Model Evaluation:")
print("R squared Error (Train):", metrics.r2_score(Y_train, training_data_prediction))
print("R squared Error (Test):", metrics.r2_score(Y_test, test_data_prediction))
print("MAE:", mean_absolute_error(Y_test, test_data_prediction))
print("RMSE:", np.sqrt(mean_squared_error(Y_test, test_data_prediction)))

"""Model Performance Comparison"""

# Train Random Forest
rf_model = RandomForestRegressor(random_state=2)
rf_model.fit(X_train, Y_train)
rf_pred = rf_model.predict(X_test)

# Evaluate
r2_rf = metrics.r2_score(Y_test, rf_pred)
mae_rf = metrics.mean_absolute_error(Y_test, rf_pred)
rmse_rf = np.sqrt(metrics.mean_squared_error(Y_test, rf_pred))

# Store previous results
results = pd.DataFrame({
    'Model': ['Linear Regression', 'Lasso Regression', 'Random Forest'],
    'R2 Score': [metrics.r2_score(Y_test, lin_reg_model.predict(X_test)),
                 metrics.r2_score(Y_test, lass_reg_model.predict(X_test)),
                 r2_rf],
    'MAE': [metrics.mean_absolute_error(Y_test, lin_reg_model.predict(X_test)),
            metrics.mean_absolute_error(Y_test, lass_reg_model.predict(X_test)),
            mae_rf],
    'RMSE': [np.sqrt(metrics.mean_squared_error(Y_test, lin_reg_model.predict(X_test))),
             np.sqrt(metrics.mean_squared_error(Y_test, lass_reg_model.predict(X_test))),
             rmse_rf]
})

print(results)

# Visualize comparison
plt.figure(figsize=(8,4))
sns.barplot(x='Model', y='R2 Score', data=results)
plt.title("Model Performance Comparison")
plt.show()

"""SELECT and SAVE BEST MODEL"""

best_model_name = results.loc[results['R2 Score'].idxmax(), 'Model']
print(f"Best performing model: {best_model_name}")

if best_model_name == 'Random Forest':
    final_model = rf_model
elif best_model_name == 'Lasso Regression':
    final_model = lass_reg_model
else:
    final_model = lin_reg_model

# Save model
joblib.dump(final_model, 'car_price_model_final.pkl')
print("Model saved as 'car_price_model_final.pkl' successfully!")
model = joblib.load('car_price_model_final.pkl')
print(f"Loaded best model successfully: {best_model_name}")

model = joblib.load('car_price_model_final.pkl')
def predict_car_price_from_features(features):
    """
    Predicts car selling price using given feature list.
    Parameters:
    features = [Present_Price, Kms_Driven, Owner, Fuel_Type, Seller_Type, Transmission,Car_Age]

    """
    prediction = model.predict([features])[0]
    prediction = max(0, prediction)
    return (round(prediction-0.5, 2), round(prediction+0.5, 2))

def predict_car_price():
    """Takes car details from user and prints predicted selling price with input validation."""

    print("Enter car details:")

    # Year of Manufacture
    while True:
        try:
            Year = int(input("Year of Manufacture (e.g., 2014): "))
            if 1900 <= Year <= 2025:
                break
            else:
                print("Invalid input value. Please enter a year between 1900 and 2025.")
        except ValueError:
            print("Invalid input value. Please enter a valid integer year.")

    # Present Price
    while True:
        try:
            Present_Price = float(input("Present Price in Lakhs (e.g., 5.59): "))
            if Present_Price >= 0:
                break
            else:
                print("Invalid input value. Price must be non-negative.")
        except ValueError:
            print("Invalid input value. Please enter a valid number.")

    # Kilometers Driven
    while True:
        try:
            Kms_Driven = int(input("Kilometers Driven (e.g., 27000): "))
            if Kms_Driven >= 0:
                break
            else:
                print("Invalid input value. Kilometers must be non-negative.")
        except ValueError:
            print("Invalid input value. Please enter a valid integer.")

    # Number of Owners
    while True:
        try:
            Owner = int(input("Number of Previous Owners (0, 1, 2...): "))
            if Owner >= 0:
                break
            else:
                print("Invalid input value. Owners must be non-negative.")
        except ValueError:
            print("Invalid input value. Please enter a valid integer.")

    # Fuel Type
    while True:
        try:
            Fuel_Type = int(input("Fuel Type (0-Petrol, 1-Diesel, 2-CNG): "))
            if Fuel_Type in [0, 1, 2]:
                break
            else:
                print("Invalid input value. Enter 0 for Petrol, 1 for Diesel, or 2 for CNG.")
        except ValueError:
            print("Invalid input value. Please enter 0, 1, or 2.")

    # Seller Type
    while True:
        try:
            Seller_Type = int(input("Seller Type (0-Individual, 1-Dealer): "))
            if Seller_Type in [0, 1]:
                break
            else:
                print("Invalid input value. Enter 0 for Individual or 1 for Dealer.")
        except ValueError:
            print("Invalid input value. Please enter 0 or 1.")

    # Transmission
    while True:
        try:
            Transmission = int(input("Transmission (0-Manual, 1-Automatic): "))
            if Transmission in [0, 1]:
                break
            else:
                print("Invalid input value. Enter 0 for Manual or 1 for Automatic.")
        except ValueError:
            print("Invalid input value. Please enter 0 or 1.")

    # Convert Year to Car_Age
    Car_Age = 2025 - Year
    input_data = np.array([[Present_Price, Kms_Driven, Owner,
                            Fuel_Type, Seller_Type, Transmission, Car_Age]], dtype=float)

    # Predict price
    predicted_price = model.predict(input_data)[0]
    predicted_price = max(0, predicted_price)  # Ensure non-negative result
    print(f"Calculated Car Age: {Car_Age} years")
    print(f"Predicted Selling Price: ₹{round(predicted_price, 2)} Lakhs")

predict_car_price()